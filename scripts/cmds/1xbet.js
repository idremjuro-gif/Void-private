const fs=require("fs");const path=require("path");const DATA_FILE=path.join(__dirname,"1xbet-users.json");const MATCHES_FILE=path.join(__dirname,"1xbet-matches.json");const TEAMS_FILE=path.join(__dirname,"teams.json");if(!fs.existsSync(DATA_FILE))fs.writeFileSync(DATA_FILE,JSON.stringify({},null,2));if(!fs.existsSync(MATCHES_FILE))fs.writeFileSync(MATCHES_FILE,JSON.stringify([],null,2));if(!fs.existsSync(TEAMS_FILE))throw new Error("teams.json introuvable");const TEAMS=JSON.parse(fs.readFileSync(TEAMS_FILE,"utf8"));const MIN_BET=20,DAILY_AMOUNT=200,MATCH_COUNT=5,RESOLVE_TIME=30*1000,OWNER_UID="100065927401614",OWNER_CUT=0.2;function loadUsers(){try{return JSON.parse(fs.readFileSync(DATA_FILE,"utf8"))}catch{return{}}}function saveUsers(u){fs.writeFileSync(DATA_FILE,JSON.stringify(u,null,2))}function loadMatches(){try{return JSON.parse(fs.readFileSync(MATCHES_FILE,"utf8"))}catch{return[]}}function saveMatches(m){fs.writeFileSync(MATCHES_FILE,JSON.stringify(m,null,2))}function now(){return Date.now()}function randomInt(max){return Math.floor(Math.random()*(max+1))}function clamp(v,a,b){return Math.max(a,Math.min(b,v))}function pickTwoDistinct(arr){const i=randomInt(arr.length-1);let j;do j=randomInt(arr.length-1);while(j===i);return[arr[i],arr[j]]}function computeBasicOdds(A,B){const drawProb=0.15;const total=(A.strength||50)+(B.strength||50);const probA=((A.strength||50)/total)*(1-drawProb);const probB=((B.strength||50)/total)*(1-drawProb);const probN=drawProb;const r=()=>0.9+Math.random()*0.4;return{A:Number((1/clamp(probA,0.01,0.99)*r()).toFixed(2)),N:Number((1/clamp(probN,0.01,0.99)*r()).toFixed(2)),B:Number((1/clamp(probB,0.01,0.99)*r()).toFixed(2))}}function randomizerForOdds(){return 0.9+Math.random()*0.6}function generateMarketOdds(match){const o={};const base=computeBasicOdds(match.teamA,match.teamB);o['1X2']=base;o['scoreExact']={};for(let a=0;a<=5;a++)for(let b=0;b<=5;b++)o['scoreExact'][`${a}-${b}`]=Number(((a===b?12:Math.abs(a-b)===1?8:10)*randomizerForOdds()).toFixed(2));o['overUnder']={};[0.5,1.5,2.5,3.5].forEach(v=>{const expG=((match.teamA.strength||50)+(match.teamB.strength||50))/200;const pOver=clamp(0.2+expG*(v+0.5),0.05,0.95);o['overUnder'][`over${v}`]=Number((1/pOver*randomizerForOdds()).toFixed(2));o['overUnder'][`under${v}`]=Number((1/(1-pOver)*randomizerForOdds()).toFixed(2));});o['htResult']={A:Number((base.A*randomizerForOdds()).toFixed(2)),N:Number((base.N*randomizerForOdds()).toFixed(2)),B:Number((base.B*randomizerForOdds()).toFixed(2))};o['btts']={yes:Number((1.9+Math.random()*0.6).toFixed(2)),no:Number((1.8+Math.random()*0.6).toFixed(2))};match.oddsExtended=o}function ensureUser(uid){const u=loadUsers();if(!u[uid]){u[uid]={uid,name:`Player-${uid}`,money:0,lastDaily:0};saveUsers(u)}return u[uid]}let matches=loadMatches();let nextMatchId=matches.reduce((max,m)=>Math.max(max,m.id||0),0)+1;function createMatches(threadID,count=MATCH_COUNT){const n=[];for(let i=0;i<count;i++){const [teamA,teamB]=pickTwoDistinct(TEAMS);const m={id:nextMatchId++,teamA,teamB,status:'open',createdAt:now(),createdInThread:threadID,bets:[]};generateMarketOdds(m);matches.push(m);n.push(m)}saveMatches(matches);return n}function closeMatchAndScheduleResolve(match){if(match.status!=='open')return;match.status='closed';saveMatches(matches);setTimeout(()=>resolveMatch(match.id),RESOLVE_TIME)}function simulateMatchEvents(match){const sA=match.teamA.strength||50,sB=match.teamB.strength||50,avgG=1.5+(Math.random()-0.5)*0.8,wA=sA/(sA+sB),wB=sB/(sA+sB),goalsA=Math.max(0,Math.round(Math.max(0,avgG*(wA*(0.8+Math.random()*0.8))))),goalsB=Math.max(0,Math.round(Math.max(0,avgG*(wB*(0.8+Math.random()*0.8)))));const total=goalsA+goalsB;let firstGoalMinute=null,firstGoalTeam=null;if(total>0){const buckets=[randomInt(15)+1,16+randomInt(14),31+randomInt(14),46+randomInt(14),61+randomInt(14),76+randomInt(14)];firstGoalMinute=buckets[randomInt(buckets.length-1)];const pAfirst=goalsA===goalsB?0.5:(goalsA>goalsB?0.65:0.35);firstGoalTeam=Math.random()<pAfirst?'A':'B'}const lastAfter85=total>0?Math.random()<0.12:false;const header=Math.random()<0.45,penalty=Math.random()<0.12,redcard=Math.random()<0.07,btts=goalsA>0&&goalsB>0,halfGoalsA=Math.min(goalsA,randomInt(goalsA)),halfGoalsB=Math.min(goalsB,randomInt(goalsB));return{goalsA,goalsB,total,firstGoalMinute,firstGoalTeam,lastAfter85,header,penalty,redcard,btts,halfGoalsA,halfGoalsB}}async function resolveMatch(matchId){const match=matches.find(m=>m.id===matchId);if(!match||match.status==='finished')return;const ev=simulateMatchEvents(match);match.score=`${ev.goalsA}-${ev.goalsB}`;match.status='finished';match.result=ev.goalsA>ev.goalsB?'A':ev.goalsB>ev.goalsA?'B':'N';match.events=ev;const users=loadUsers();let ownerGain=0;let recap=`🏁 Résultat Match ${match.id}\n⚽ ${match.teamA.name} ${match.score} ${match.teamB.name}\n`;recap+=match.result==='N'?'⚖️ Match Nul\n\n':`🏆 ${(match.result==='A'?match.teamA.name:match.teamB.name)} a gagné !\n\n`;let gainsText='';for(const bet of match.bets){const u=users[bet.user];if(!u)continue;let win=false;switch(bet.market){case'1X2':win=(bet.choice===match.result);break;case'scoreExact':win=(bet.choice===match.score);break;case'overUnder':{const num=Number(bet.choice.replace(/over|under/,''));win=bet.choice.startsWith('over')?ev.total>num:ev.total<num;break;}case'htResult':{const htRes=ev.halfGoalsA>ev.halfGoalsB?'A':ev.halfGoalsB>ev.halfGoalsA?'B':'N';win=bet.choice===htRes;break;}case'doubleChance':if(bet.choice==='1X')win=(match.result==='A'||match.result==='N');if(bet.choice==='X2')win=(match.result==='B'||match.result==='N');if(bet.choice==='12')win=(match.result==='A'||match.result==='B');break;case'btts':win=(bet.choice==='yes'?ev.btts:!ev.btts);break;case'htScore':win=(bet.choice===`${ev.halfGoalsA}-${ev.halfGoalsB}`);break;case'firstGoalMinute':{if(!ev.firstGoalMinute)win=false;else{const parts=bet.choice.split('-').map(Number);win=(ev.firstGoalMinute>=parts[0]&&ev.firstGoalMinute<=parts[1]);}break;}case'noGoal':win=(ev.total===0);break;case'firstOrLastTeam':{if(bet.choiceType==='first')win=(ev.firstGoalTeam===bet.choice);if(bet.choiceType==='last'){if(ev.total===0)win=false;else{const lastTeam=ev.goalsA>ev.goalsB?'A':ev.goalsB>ev.goalsA?'B':(Math.random()<0.5?'A':'B');win=(lastTeam===bet.choice);}}break;}case'lastAfter85':win=(bet.choice==='yes'?ev.lastAfter85:!ev.lastAfter85);break;case'specials':if(bet.choiceKey==='header')win=(ev.header===bet.choice==='yes');if(bet.choiceKey==='penalty')win=(ev.penalty===bet.choice==='yes');if(bet.choiceKey==='redcard')win=(ev.redcard===bet.choice==='yes');break;default:win=false;}if(win){const gain=Math.floor(bet.amount*bet.odds);u.money=(u.money||0)+gain;bet.status='win';gainsText+=`✅ ${u.name} a gagné ${gain}$ (mise ${bet.amount}$ sur ${bet.market} - ${bet.choice}${bet.choiceKey?' '+bet.choiceKey:''})\n`;}else{const lost=bet.amount;const ownerCut=Math.floor(lost*OWNER_CUT);ownerGain+=ownerCut;bet.status='lose';gainsText+=`❌ ${u.name} a perdu (${lost}$ sur ${bet.market} - ${bet.choice}${bet.choiceKey?' '+bet.choiceKey:''})\n`;}}if(ownerGain>0){if(!users[OWNER_UID])users[OWNER_UID]={uid:OWNER_UID,name:"Merdi",money:0,lastDaily:0};users[OWNER_UID].money=(users[OWNER_UID].money||0)+ownerGain;}saveUsers(users);saveMatches(matches);if(match.createdInThread){try{const details=`Évènements : 1er but ${ev.firstGoalMinute?ev.firstGoalMinute+"'":'—'} ${ev.firstGoalTeam?(ev.firstGoalTeam==='A'?match.teamA.name:match.teamB.name):''} | Last>85: ${ev.lastAfter85} | Header:${ev.header} | Penalty:${ev.penalty} | Red:${ev.redcard}`;global.api.sendMessage(`${recap}${details}\n\n${gainsText||'Aucun pari enregistré.'}`,match.createdInThread);}catch(e){console.error(e);}}}

module.exports={config:{name:"1xbet",aliases:["bet"],version:"5.0",author:"Merdi Madimba",role:0,description:"Paris sportifs — lié à bank",category:"🎮 Jeux"},onStart:async function({api,event,args}){global.api=api;const{threadID,senderID,messageID}=event;const u=loadUsers();if(!u[senderID]){let fb=`Player-${senderID}`;try{const info=await api.getUserInfo(senderID);if(info&&info[senderID]&&info[senderID].name)fb=info[senderID].name}catch{}u[senderID]={uid:senderID,name:fb,money:0,lastDaily:0};saveUsers(u);}const user=u[senderID];const cmd=(args[0]||"").toLowerCase();if(!cmd){return api.sendMessage(`🏟️ 1XBET - MENU

/1xbet matches → Voir matchs ouverts
/1xbet bet [ID] [market] [option] [montant] → Placer pari
/1xbet solde → Voir ton solde
/1xbet daily → Bonus quotidien
/1xbet top → Top 10 joueurs`,threadID,messageID);}switch(cmd){case"matches":{let open=matches.filter(m=>m.status==="open"&&m.createdInThread===threadID);if(!open.length)open=createMatches(threadID,MATCH_COUNT);const list=open.map(m=>{const o=m.oddsExtended||{};const a=(o['1X2']&&o['1X2'].A)?o['1X2'].A:'N/A';const n=(o['1X2']&&o['1X2'].N)?o['1X2'].N:'N/A';const b=(o['1X2']&&o['1X2'].B)?o['1X2'].B:'N/A';return `📍 Match ${m.id}\n⚽ ${m.teamA.name} 🆚 ${m.teamB.name}\n1X2 → A:${a} N:${n} B:${b}`;}).join("\n\n");return api.sendMessage(`📋 MATCHS DISPONIBLES :\n\n${list}`,threadID,messageID);}case"solde":case"balance":return api.sendMessage(`💰 ${user.name}, ton solde est de **${user.money}$**`,threadID,messageID);case"daily":{const ts=now();if(ts-(user.lastDaily||0)<24*60*60*1000)return api.sendMessage("🕒 Reviens dans 24h pour ton bonus.",threadID,messageID);user.money+=DAILY_AMOUNT;user.lastDaily=ts;saveUsers(u);return api.sendMessage(`✅ +${DAILY_AMOUNT}$ ajoutés à ton solde !`,threadID,messageID);}case "top": {
  const s = Object.values(loadUsers())
    .sort((a, b) => (b.money || 0) - (a.money || 0))
    .slice(0, 10)
    .map((u, i) => `${i + 1}. ${u.name} → ${u.money || 0}$`)
    .join("\n");
  return api.sendMessage(`🏆 TOP 10 JOUEURS :\n\n${s || 'Aucun joueur enregistré.'}`, threadID, messageID);
}

case "bet": {
  const [matchId, market, choiceOption, amountStr] = args.slice(1);
  const amount = parseInt(amountStr);
  const match = matches.find(m => m.id == matchId && m.status === 'open');
  if (!match) return api.sendMessage("❌ Match introuvable ou déjà fermé.", threadID, messageID);
  if (!market || !choiceOption || isNaN(amount)) return api.sendMessage("⚠️ Syntaxe : /1xbet bet [ID] [market] [option] [montant]", threadID, messageID);
  if (amount < MIN_BET) return api.sendMessage(`⚠️ Mise minimale : ${MIN_BET}$`, threadID, messageID);
  if (user.money < amount) return api.sendMessage("💸 Solde insuffisant.", threadID, messageID);

  user.money -= amount;
  match.bets.push({ user: senderID, market, choice: choiceOption, amount, odds: (match.oddsExtended[market] && match.oddsExtended[market][choiceOption]) || 1 });
  saveUsers(u);
  saveMatches(matches);

  return api.sendMessage(`✅ Pari enregistré !
📍 Match : ${match.teamA.name} 🆚 ${match.teamB.name}
🎯 Market : ${market}
📊 Option : ${choiceOption}
💵 Mise : ${amount}$`, threadID, messageID);
}

default:
  return api.sendMessage("❌ Commande inconnue. Utilise le menu pour voir les options disponibles.", threadID, messageID);
}
}
};
